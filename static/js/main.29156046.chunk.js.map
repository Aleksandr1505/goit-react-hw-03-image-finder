{"version":3,"sources":["components/PhotoCard/PhotoCard.module.css","components/App.module.css","components/SearchForm/SearchForm.module.css","components/SearchForm/SearchForm.js","components/PhotoCard/PhotoCard.js","components/Gallery/Gallery.js","components/Modal/Modal.js","services/photo-api.js","components/App.js","serviceWorker.js","index.js","components/Gallery/Gallery.module.css","components/Modal/Modal.module.css"],"names":["module","exports","SearchForm","onSubmitForm","inputValue","onChangeInput","onSubmit","className","styles","searchForm","onChange","input","value","name","type","autoComplete","placeholder","PhotoCard","photo","openModal","galleryItem","photoCard","src","webformatURL","alt","stats","statsItem","likes","views","comments","downloads","onClick","largeImageURL","fullscreenButton","style","pointerEvents","Gallery","imagesArr","onClickButton","gallery","map","image","key","id","button","Modal","largeURL","closeModal","overlay","modal","axios","defaults","baseURL","fetchPhotos","pageNumber","querySearch","process","settings","perPAGE","page","search","get","incrementPageNumber","App","state","isOpenModal","closeOnEscape","e","keyCode","setState","fetchingImages","API","toLowerCase","then","response","prevState","data","hits","window","scrollTo","top","document","body","scrollHeight","behavior","fetchingNewImages","catch","changePageNumber","handelChange","target","preventDefault","openModalWindow","url","closeModalWindow","tagName","removeEventListener","this","addEventListener","app","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,MAAQ,yBAAyB,UAAY,6BAA6B,iBAAmB,oCAAoC,YAAc,iC,mBCA1MD,EAAOC,QAAU,CAAC,IAAM,mB,2ECAxBD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,MAAQ,4B,mJCuBvDC,EApBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,cAA7B,OACjB,0BAAMC,SAAUH,EAAcI,UAAWC,IAAOC,YAC9C,2BACEC,SAAUL,EACVE,UAAWC,IAAOG,MAClBC,MAAOR,EACPS,KAAK,OACLC,KAAK,OACLC,aAAa,MACbC,YAAY,uB,gBCyCHC,EAlDG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC1B,OACE,wBAAIZ,UAAWC,IAAOY,aACpB,yBAAKb,UAAWC,IAAOa,WACrB,yBAAKC,IAAKJ,EAAMK,aAAcC,IAAI,SAClC,yBAAKjB,UAAWC,IAAOiB,OACrB,uBAAGlB,UAAWC,IAAOkB,WACnB,uBAAGnB,UAAU,kBAAb,YACCW,EAAMS,OAET,uBAAGpB,UAAWC,IAAOkB,WACnB,uBAAGnB,UAAU,kBAAb,cACCW,EAAMU,OAET,uBAAGrB,UAAWC,IAAOkB,WACnB,uBAAGnB,UAAU,kBAAb,WACCW,EAAMW,UAET,uBAAGtB,UAAWC,IAAOkB,WACnB,uBAAGnB,UAAU,kBAAb,kBACCW,EAAMY,YAGX,4BACEC,QAAS,kBAAMZ,EAAUD,EAAMc,gBAC/BlB,KAAK,SACLP,UAAWC,IAAOyB,kBAElB,uBAAG1B,UAAU,iBAAiB2B,MAAO,CAAEC,cAAe,SAAtD,oB,gBCIKC,EA/BC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,cAAenB,EAAgB,EAAhBA,UAC3C,OACE,oCACE,wBAAIZ,UAAWC,IAAO+B,SACnBF,EAAUG,KAAI,SAAAC,GAAK,OAClB,kBAAC,EAAD,CAAWC,IAAKD,EAAME,GAAIzB,MAAOuB,EAAOtB,UAAWA,QAGvD,4BAAQY,QAASO,EAAe/B,UAAWC,IAAOoC,OAAQ9B,KAAK,UAA/D,e,gBCMS+B,EAfD,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACzB,OACE,yBAAKxC,UAAWC,IAAOwC,QAASjB,QAASgB,GACvC,yBAAKxC,UAAWC,IAAOyC,OACrB,yBAAK3B,IAAKwB,EAAUtB,IAAI,a,iCCNhC0B,IAAMC,SAASC,QAAU,2BAElB,IAAMC,EAAc,WAA0C,IAAzCC,EAAwC,uDAA3B,EAAGC,EAAwB,uDAAV,MAClDb,EAAG,eAAWc,sCACdC,EAAW,2CACXC,EAAU,eACVC,EAAI,gBAAYL,GAChBM,EAAM,aAASL,GACrB,OAAOL,IAAMW,IAAInB,EAAMe,EAAWC,EAAUC,EAAOC,ICH/CE,EAAsB,EA8GbC,E,2MA3GbC,MAAQ,CACN3B,UAAW,GACXiB,WAAY,EACZC,YAAa,GACbU,aAAa,EACbjC,cAAe,I,EAYjBkC,cAAgB,SAAAC,GACI,KAAdA,EAAEC,SACJ,EAAKC,SAAS,CACZJ,aAAa,K,EAKnBK,eAAiB,WAAO,IAAD,EACe,EAAKN,MAAjCV,EADa,EACbA,WAAYC,EADC,EACDA,YACpBgB,EAAgBjB,EAAYC,EAAYiB,eAAeC,MAAK,SAAAC,GAAQ,OAClE,EAAKL,UACH,SAAAM,GAAS,MAAK,CACZtC,UAAU,GAAD,mBAAMsC,EAAUtC,WAAhB,YAA8BqC,EAASE,KAAKC,WAEvD,kBACEC,OAAOC,SAAS,CACdC,IAAKC,SAASC,KAAKC,aACnBC,SAAU,kB,EAMpBC,kBAAoB,WAAO,IAAD,EACY,EAAKrB,MAAjCV,EADgB,EAChBA,WAAYC,EADI,EACJA,YACpBgB,EAAgBjB,EAAYC,EAAYiB,eACrCC,MAAK,SAAAC,GAAQ,OACZ,EAAKL,SAAS,CACZhC,UAAU,YAAKqC,EAASE,KAAKC,WAGhCS,S,EAGLC,iBAAmB,WACjB,EAAKlB,UAAS,SAAAM,GAAS,MAAK,CAC1BrB,WAAYqB,EAAUrB,WAAaQ,MAErC,EAAKQ,kB,EAGPkB,aAAe,SAAArB,GACb,EAAKE,SAAS,CAAEd,YAAaY,EAAEsB,OAAO7E,S,EAGxCT,aAAe,SAAAgE,GACbA,EAAEuB,iBACF,EAAKrB,SAAS,CAAEf,WAAY,IAC5B,EAAK+B,qB,EAGPM,gBAAkB,SAAAC,GAChB,EAAKvB,SAAS,CACZJ,aAAa,EACbjC,cAAe4D,K,EAInBC,iBAAmB,SAAA1B,GACQ,QAArBA,EAAEsB,OAAOK,SAGb,EAAKzB,SAAS,CACZJ,aAAa,K,oFAxEfgB,SAASc,oBAAoB,UAAWC,KAAK9B,iB,0CAI7C8B,KAAK1B,iBACLW,SAASgB,iBAAiB,UAAWD,KAAK9B,iB,+BAuElC,IAAD,EACwD8B,KAAKhC,MAA5DT,EADD,EACCA,YAAalB,EADd,EACcA,UAAW4B,EADzB,EACyBA,YAAajC,EADtC,EACsCA,cAC7C,OACE,yBAAKzB,UAAWC,IAAO0F,KACrB,kBAAC,EAAD,CACE/F,aAAc6F,KAAK7F,aACnBC,WAAYmD,EACZlD,cAAe2F,KAAKR,eAEtB,kBAAC,EAAD,CACEnD,UAAWA,EACXC,cAAe0D,KAAKT,iBACpBpE,UAAW6E,KAAKL,kBAEjB1B,GACC,kBAAC,EAAD,CAAOnB,SAAUd,EAAee,WAAYiD,KAAKH,wB,GArGzCM,aCGEC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB,kBElInB/G,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,kBCA9DD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,wB","file":"static/js/main.29156046.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoCard\":\"PhotoCard_photoCard__2H8fu\",\"stats\":\"PhotoCard_stats__2ReCI\",\"statsItem\":\"PhotoCard_statsItem__GUW27\",\"fullscreenButton\":\"PhotoCard_fullscreenButton__2tooH\",\"galleryItem\":\"PhotoCard_galleryItem__1I69a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__MJJUV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchForm\":\"SearchForm_searchForm__6ophZ\",\"input\":\"SearchForm_input__2Jx87\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SearchForm.module.css';\n\nconst SearchForm = ({ onSubmitForm, inputValue, onChangeInput }) => (\n  <form onSubmit={onSubmitForm} className={styles.searchForm}>\n    <input\n      onChange={onChangeInput}\n      className={styles.input}\n      value={inputValue}\n      name=\"text\"\n      type=\"text\"\n      autoComplete=\"off\"\n      placeholder=\"Search images...\"\n    />\n  </form>\n);\n\nSearchForm.propTypes = {\n  inputValue: PropTypes.string.isRequired,\n  onSubmitForm: PropTypes.func.isRequired,\n  onChangeInput: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './PhotoCard.module.css';\n\nconst PhotoCard = ({ photo, openModal }) => {\n  return (\n    <li className={styles.galleryItem}>\n      <div className={styles.photoCard}>\n        <img src={photo.webformatURL} alt=\"foto\" />\n        <div className={styles.stats}>\n          <p className={styles.statsItem}>\n            <i className=\"material-icons\">thumb_up</i>\n            {photo.likes}\n          </p>\n          <p className={styles.statsItem}>\n            <i className=\"material-icons\">visibility</i>\n            {photo.views}\n          </p>\n          <p className={styles.statsItem}>\n            <i className=\"material-icons\">comment</i>\n            {photo.comments}\n          </p>\n          <p className={styles.statsItem}>\n            <i className=\"material-icons\">cloud_download</i>\n            {photo.downloads}\n          </p>\n        </div>\n        <button\n          onClick={() => openModal(photo.largeImageURL)}\n          type=\"button\"\n          className={styles.fullscreenButton}\n        >\n          <i className=\"material-icons\" style={{ pointerEvents: 'none' }}>\n            zoom_out_map\n          </i>\n        </button>\n      </div>\n    </li>\n  );\n};\n\nPhotoCard.propTypes = {\n  photo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    webformatURL: PropTypes.string.isRequired,\n    largeImageURL: PropTypes.string.isRequired,\n    likes: PropTypes.number.isRequired,\n    views: PropTypes.number.isRequired,\n    comments: PropTypes.number.isRequired,\n    downloads: PropTypes.number.isRequired,\n  }).isRequired,\n  openModal: PropTypes.func.isRequired,\n};\n\nexport default PhotoCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PhotoCard from '../PhotoCard/PhotoCard';\nimport styles from './Gallery.module.css';\n\nconst Gallery = ({ imagesArr, onClickButton, openModal }) => {\n  return (\n    <>\n      <ul className={styles.gallery}>\n        {imagesArr.map(image => (\n          <PhotoCard key={image.id} photo={image} openModal={openModal} />\n        ))}\n      </ul>\n      <button onClick={onClickButton} className={styles.button} type=\"button\">\n        Load More\n      </button>\n    </>\n  );\n};\n\nGallery.propTypes = {\n  imagesArr: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      webformatURL: PropTypes.string.isRequired,\n      largeImageURL: PropTypes.string.isRequired,\n      likes: PropTypes.number.isRequired,\n      views: PropTypes.number.isRequired,\n      comments: PropTypes.number.isRequired,\n      downloads: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onClickButton: PropTypes.func.isRequired,\n  openModal: PropTypes.func.isRequired,\n};\n\nexport default Gallery;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Modal.module.css';\n\nconst Modal = ({ largeURL, closeModal }) => {\n  return (\n    <div className={styles.overlay} onClick={closeModal}>\n      <div className={styles.modal}>\n        <img src={largeURL} alt=\"Large\" />\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  largeURL: PropTypes.string.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://pixabay.com/api/';\n\nexport const fetchPhotos = (pageNumber = 1, querySearch = 'dog') => {\n  const key = `?key=${process.env.REACT_APP_PIXABAY_API_KEY}`;\n  const settings = '&image_type=photo&orientation=horizontal';\n  const perPAGE = '&per_page=12';\n  const page = `&page=${pageNumber}`;\n  const search = `&q=${querySearch}`;\n  return axios.get(key + settings + perPAGE + page + search);\n};\n\nexport const o = () => null;\n// export\n","import React, { Component } from 'react';\nimport SearhForm from './SearchForm/SearchForm';\nimport Gallery from './Gallery/Gallery';\nimport Modal from './Modal/Modal';\nimport styles from './App.module.css';\nimport * as API from '../services/photo-api';\n\nconst incrementPageNumber = 1;\n\nclass App extends Component {\n  state = {\n    imagesArr: [],\n    pageNumber: 1,\n    querySearch: '',\n    isOpenModal: false,\n    largeImageURL: '',\n  };\n\n  componentWillMount() {\n    document.removeEventListener('keydown', this.closeOnEscape);\n  }\n\n  componentDidMount() {\n    this.fetchingImages();\n    document.addEventListener('keydown', this.closeOnEscape);\n  }\n\n  closeOnEscape = e => {\n    if (e.keyCode === 27) {\n      this.setState({\n        isOpenModal: false,\n      });\n    }\n  };\n\n  fetchingImages = () => {\n    const { pageNumber, querySearch } = this.state;\n    API.fetchPhotos(pageNumber, querySearch.toLowerCase()).then(response =>\n      this.setState(\n        prevState => ({\n          imagesArr: [...prevState.imagesArr, ...response.data.hits],\n        }),\n        () =>\n          window.scrollTo({\n            top: document.body.scrollHeight,\n            behavior: 'smooth',\n          }),\n      ),\n    );\n  };\n\n  fetchingNewImages = () => {\n    const { pageNumber, querySearch } = this.state;\n    API.fetchPhotos(pageNumber, querySearch.toLowerCase())\n      .then(response =>\n        this.setState({\n          imagesArr: [...response.data.hits],\n        }),\n      )\n      .catch();\n  };\n\n  changePageNumber = () => {\n    this.setState(prevState => ({\n      pageNumber: prevState.pageNumber + incrementPageNumber,\n    }));\n    this.fetchingImages();\n  };\n\n  handelChange = e => {\n    this.setState({ querySearch: e.target.value });\n  };\n\n  onSubmitForm = e => {\n    e.preventDefault();\n    this.setState({ pageNumber: 1 });\n    this.fetchingNewImages();\n  };\n\n  openModalWindow = url => {\n    this.setState({\n      isOpenModal: true,\n      largeImageURL: url,\n    });\n  };\n\n  closeModalWindow = e => {\n    if (e.target.tagName === 'IMG') {\n      return;\n    }\n    this.setState({\n      isOpenModal: false,\n    });\n  };\n\n  render() {\n    const { querySearch, imagesArr, isOpenModal, largeImageURL } = this.state;\n    return (\n      <div className={styles.app}>\n        <SearhForm\n          onSubmitForm={this.onSubmitForm}\n          inputValue={querySearch}\n          onChangeInput={this.handelChange}\n        />\n        <Gallery\n          imagesArr={imagesArr}\n          onClickButton={this.changePageNumber}\n          openModal={this.openModalWindow}\n        />\n        {isOpenModal && (\n          <Modal largeURL={largeImageURL} closeModal={this.closeModalWindow} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gallery\":\"Gallery_gallery__8kPih\",\"button\":\"Gallery_button__3AXgI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Modal_overlay__1gujg\",\"modal\":\"Modal_modal__3jEv1\"};"],"sourceRoot":""}